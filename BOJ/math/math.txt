(1) 모듈러 연산

(A+B) mod M = ((A mod M) + (B mod M)) mod M
(AXB) mod M = ((A mod M) X (B mod M)) mod M
(A-B) mod M = ((A mod M) - (B mod M)+M) mod M
// 빼기 연산의 경우 언어에 따라 음수값이 나올 수 있기 때문



(2) 최대 공약수 (GCD)

유클리드 호제법 사용하기
GCD(a, b)
a%b=r, GCD(b, r)
이때 r=0이 되는 b가 최대 공약수
GCD(24, 16) -> GCD(16, 8) -> GCD(8, 0)

재귀함수를 사용하여
int gcd(int a, int b){
    if (b==0) return a;
    else return gcd(b, a%b);
}

반복문을 사용하여
int gcd(int a, int b){ // O(logn)
    while (b!=0){
        int r = a%b;
        a = b;
        b = r;
    }
    return a;
}


(3) 최소 공배수 (LCM)
G = GCD(A, B)
AXB = GCD*LCM
LCM=(A*B).G